import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.nio.ByteBuffer;


public class FileSender {

	// Import some needed classes

	// Which port should we listen to
	static int port = 5000;
	
	// Which address
	static String group = "225.4.5.6";
	// Which ttl
	static int ttl = 1;

	static MulticastSocket soc;
	
	
	public FileSender(){
		try {
			soc = new MulticastSocket();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("CANNOT CREATE Multicast Socket");
		}
	}
	
	protected void finalize()
	{
		soc.close();
		System.out.println("Multicast Socket closed");
	};
	
	public static int getPort() {
		return port;
	}


	public static void setPort(int port) {
		FileSender.port = port;
	}


	public static String getGroup() {
		return group;
	}


	public static void setGroup(String group) {
		FileSender.group = group;
	}


	public static int getTtl() {
		return ttl;
	}


	public static void setTtl(int ttl) {
		FileSender.ttl = ttl;
	}

	//Helper functions 
	public static byte[] intToByteArray(int value) {
	     return  ByteBuffer.allocate(4).putInt(value).array();
	}

	public static byte[] intToByteArray2(int value) {
	    return new byte[] {
	        (byte) (value >> 24),
	        (byte) (value >> 16),
	        (byte) (value >> 8),
	        (byte) value};
	}
	
	public static byte[] byteArrayConcatination(byte[] a, byte[] b)
	{
		byte[] c = new byte[a.length + b.length];
		System.arraycopy(a, 0, c, 0, a.length);
		System.arraycopy(b, 0, c, a.length, b.length);
		return c;
	}
	
	
	public static boolean sendPacket(byte [] buf){
		if(buf == null)
			return false;
		
		try {
			soc.setTimeToLive(ttl);
			DatagramPacket pack = new DatagramPacket(buf, buf.length,
					 InetAddress.getByName(group), port);
			soc.send(pack);
			return true;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.err.println("Send Data Packet Failed");
			return false;
		}
		
	}
	
	//Standard Packet is 
	public static boolean sendStdPacket(int seqNum, byte [] buf){
		byte[] seq = intToByteArray(seqNum);
		byte[] payload = null;
		
		//If buf is null still send seqNum as the payload
		if(buf != null)
			payload = byteArrayConcatination(seq, buf);
		else
			payload = seq;
		
		
		try {
			soc.setTimeToLive(ttl);
			DatagramPacket pack = new DatagramPacket(buf, buf.length,
					 InetAddress.getByName(group), port);
			soc.send(pack);
			return true;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.err.println("Send Standard Data Packet Failed");
			return false;
		}
		
	}
	
	


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		FileSender sender = new FileSender();
		sender.sendPacket(null);
	}

}
