import java.io.IOException;
import java.net.DatagramPacket;
import java.util.Date;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;


public class FileCombinerPlus extends FileSeperator implements Runnable{

	private volatile long cursor = 0;
	private volatile int nextSeqNum = 1;
	private volatile LinkedList<DatagramPacket> buff = null;
	private volatile BitMap bitMap = null;
	private SocketManager sm = null;

	private Thread writeThread;
	
	private final int poolSize = 4;
	private ExecutorService recoveryRequestThread = null;
	
	private Object lockForLastRecoveryRequestSeqNum = new Object();
	private volatile int lastRecoveryRequestSeqNum = 0;

	public int getNextSeqNum() {
			return nextSeqNum;
	}

	public synchronized void setNextSeqNum(int nextSeqNum) {
		this.nextSeqNum = nextSeqNum;
	}


	public FileCombinerPlus(String FileName, long blockNum)
	{
		super(FileName,blockNum);

		this.nextSeqNum = 1;
		this.buff = new LinkedList<DatagramPacket>();
		this.bitMap = new BitMap((int)this.getBlockNum());

//		this.recoveryRequestThread = Executors.newFixedThreadPool(poolSize);
		this.recoveryRequestThread = Executors.newSingleThreadExecutor();
		
		this.writeThread = new Thread(this);
		//		writeThread.setDaemon(true);		//FOR TEST
		writeThread.start();
	}


	public void restart(){
		writeThread.interrupt();
	}

	public void putDatapacketIntoBuffer(DatagramPacket pack)
	{
		synchronized(buff){
			this.buff.offer(pack);
		}
	}

	public DatagramPacket getDatapacketFromBuffer()
	{
		synchronized(buff)
		{
			return this.buff.poll();
		}
	}

	public synchronized boolean isWritten(DatagramPacket pack)
	{
		int seqN = SocketManager.getPacketSeqNum(pack);
		return bitMap.checkBit(seqN);
	}

	public synchronized boolean isWritten(int seqNum)
	{
		return bitMap.checkBit(seqNum);
	}


	//Read Datablock from disk
	public synchronized byte[] getDataBlock(int seqNum)
	{
		synchronized(this.raf){
			this.cursor = this.getBlockSize()*(seqNum-1);
			return super.getDataBlock(seqNum);
		}
	}

	//Write Datablock to disk
	public synchronized void writeStdDatapacketToDisk(DatagramPacket pack)
	{
		int seqN = SocketManager.getPacketSeqNum(pack);
		if(seqN < getNextSeqNum() || bitMap.checkBit(seqN)){
			//do nothing
			System.err.println("Data Block Have Already Been Written");
		}
		else{
			try {
				synchronized(this.raf)
				{
					//Seek To The position
					this.cursor = this.getBlockSize()*(seqN-1);
					this.raf.seek(this.cursor);

					//Write To the position
					writeDataPacketToFile(pack);
				}
				//Set the bit to be true 
				//meaning that this block has been written
				bitMap.setBitTrue(seqN);

				setNextSeqNum(bitMap.findNextFalseBit(nextSeqNum));

			} catch (IOException e) {
				System.err.println("Fail to seek to position for seqN: "+ seqN);
				e.printStackTrace();
			}

		}
	}

	public boolean writeByteToFile(byte[] buf, int offset, int length){


		try {
			this.raf.write(buf, offset, length);
			return true;
		} catch (IOException e) {
			e.printStackTrace();
			System.err.println("Write Byte to file failed!");
			return false;			
		}
	}

	//Write a standard packet to Disk
	public boolean writeDataPacketToFile(DatagramPacket pack)
	{
		return writeByteToFile(pack.getData(), 4, pack.getLength()-4);
	}

	public int recoveryRequestScheduler(int lock_prevent_counter)
	{
		if(getNextSeqNum()!=1)
		{
//			System.out.println("In here trackerSeqNum:"+getLastRecoveryRequestSeqNum());
			if(this.getLastRecoveryRequestSeqNum()==0 || lock_prevent_counter>200)
			{
				lock_prevent_counter = 0;
				this.setLastRecoveryRequestSeqNum(getNextSeqNum());
				recoveryRequestThread.execute(new RecoveryRequestTask(getNextSeqNum()));
			}
			else{
				lock_prevent_counter++;
			}
		}
		return lock_prevent_counter;
	}
	
	@Override
	public void run() {
		System.out.println("Start Combining File");
		int lock_prevent_counter = 0;
		
		while(this.nextSeqNum<=this.getBlockNum())
		{
			
			if(buff.isEmpty())
			{
				try {
					
					TimeUnit.MILLISECONDS.sleep(200);
				
					//check if file transmission have begun
					lock_prevent_counter = recoveryRequestScheduler(lock_prevent_counter);
					//if true, send recovery request packet
//					if(getNextSeqNum()!=1)
//					{
////						System.out.println("In here trackerSeqNum:"+getLastRecoveryRequestSeqNum());
//						if(this.getLastRecoveryRequestSeqNum()==0 || lock_prevent_counter>200)
//						{
//							lock_prevent_counter = 0;
//							this.setLastRecoveryRequestSeqNum(getNextSeqNum());
//							recoveryRequestThread.execute(new RecoveryRequestTask(getNextSeqNum()));
//						}
//						else{
//							lock_prevent_counter++;
//						}
//					}
					
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					//					e.printStackTrace();
				}
			//Do some checking
			}else{
				
				DatagramPacket pack = this.getDatapacketFromBuffer();

				//check if file transmission have begun
				if(getNextSeqNum()< SocketManager.getPacketSeqNum(pack))
				{
					if(this.getLastRecoveryRequestSeqNum()==0 || lock_prevent_counter>200)
					{
						lock_prevent_counter = 0;
						this.setLastRecoveryRequestSeqNum(getNextSeqNum());
						recoveryRequestThread.execute(new RecoveryRequestTask(getNextSeqNum()));
					}
					else{
						lock_prevent_counter++;
					}
				}
				
				if(pack!=null)
					writeStdDatapacketToDisk(pack);

//				System.out.println("Current nextSeqNum:" + this.nextSeqNum);
			}

		}
		System.out.println("Finish Writing File");
		
		sm.finalize();
		
		try {
			this.raf.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public int getLastRecoveryRequestSeqNum() {
		synchronized(lockForLastRecoveryRequestSeqNum)
		{
			return lastRecoveryRequestSeqNum;
		}
	}

	public void setLastRecoveryRequestSeqNum(int lastRecoveryRequestSeqNum) {
		synchronized(lockForLastRecoveryRequestSeqNum)
		{
			this.lastRecoveryRequestSeqNum = lastRecoveryRequestSeqNum;
		}
	}

	public SocketManager getSm() {
		return sm;
	}

	public void setSm(SocketManager sm) {
		this.sm = sm;
	}

	class RecoveryRequestTask implements Runnable{

		private int seqNum;
		
		public RecoveryRequestTask(int seqN)
		{
			this.seqNum = seqN;
		}
		
		@Override
		public void run() {
			
			try {
				TimeUnit.MILLISECONDS.sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			if(getNextSeqNum()<= this.seqNum)
			{
				System.out.println("Sending Recovery Request for SeqN:"+this.seqNum);
				Date timestamp = new Date();
				sm.sendStdPacket(0-seqNum, SocketManager.convertLongToBytes(timestamp.getTime()));
			
				//Request Tracker Reset
				setLastRecoveryRequestSeqNum(0);
			}
			
		}
		
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		FileCombinerPlus fc = new FileCombinerPlus("/Users/Freehan/Desktop/Test/copy",43422L);
		SocketManager sm = new SocketManager();

		int index = 0;
		//IMPORTANT!!!: Potential Problem here, if the last packet had been received but 
		//		while(fc.getNextSeqNum()<=fc.getBlockNum())
		while(index < fc.getBlockNum())
		{
			DatagramPacket pack = sm.recievePacket();

			if(pack == null){
				System.err.println("Socket Failed to Receive a Packet");
				continue;
			}
			else
			{
				int seqN = SocketManager.getPacketSeqNum(pack);
				//				System.out.println("Receive data packet:"+ seqN);
				if(seqN >= fc.getNextSeqNum() && !fc.isWritten(pack))
				{
					fc.putDatapacketIntoBuffer(pack);
					fc.restart();
					index++;
				}

			}		
		}

		System.out.println(fc.getNextSeqNum());
		sm.finalize();

	}



}
