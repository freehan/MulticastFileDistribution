import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.DatagramPacket;
import java.util.Date;


public class Receiver {

	
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		FileCombinerPlus fc = new FileCombinerPlus("/Users/Freehan/Desktop/Test/copy100",68120L); //43422/28
		SocketManager sm = new SocketManager();
		fc.setSm(sm);
		ReceiverRecoveryListener rrl = new ReceiverRecoveryListener(sm, fc);
		
		while(fc.getNextSeqNum() <= fc.getBlockNum())
		{
			DatagramPacket pack = sm.recievePacket();
			
			if(pack == null){
				
				//Check if File Transmission is Complete
				if(fc.getNextSeqNum() > fc.getBlockNum())
					break;
				
				System.err.println("Socket Failed to Receive a Packet");
				continue;
			}
			else
			{
				int seqN = SocketManager.getPacketSeqNum(pack);
//				System.out.println("Receive data packet:"+ seqN);
				//Receive Data Packet
				if(seqN >= fc.getNextSeqNum() && !fc.isWritten(pack))
				{	
					fc.putDatapacketIntoBuffer(pack);
					fc.restart();
				}
				else if(seqN > 0)
				{
					rrl.hsContainsAndRemove(seqN);
				}
				//Receive Recovery Request Packet And Receiver Had it
				else if(seqN < 0 && fc.isWritten(Math.abs(seqN)))
				{
					Date now = new Date();
					byte[] timestamp = SocketManager.getPacketData(pack);
					long timeElapse = now.getTime() - SocketManager.convertBytesToLong(timestamp);
					
					seqN = Math.abs(seqN);				
					rrl.hsAdd(seqN);
					rrl.startResendTask(seqN, timeElapse);
			
					
				}
				
			}		
		}
		
		System.out.println("Receiver Listener Ended with fc.NextSeqNum:"+fc.getNextSeqNum());
		
	}

}
